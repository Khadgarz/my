<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<!-- <properties resource="resource/config.properties" /> -->
	<context id="oracle" targetRuntime="MyBatis3" defaultModelType="flat">
		<!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表； 一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
		<property name="autoDelimitKeywords" value="false" />
		<!-- 生成的Java文件的编码 -->
		<property name="javaFileEncoding" value="UTF-8" />
		<!-- 格式化java代码 -->
		<property name="javaFormatter"
			value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
		<!--beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
		<property name="beginningDelimiter" value="" />
		<property name="endingDelimiter" value="" />


		<!-- 注释 <commentGenerator type="org.mybatis.generator.plugins.MyCommentGenerator" 
			/> -->
		<plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin"></plugin>
		<plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>
		<plugin type="org.mybatis.generator.plugins.MyPlugin">
			<property name="mappers" value="com.gy.common.util.BaseMapper" />
		</plugin>
		<!-- <commentGenerator> <property name="suppressDate" value="true" /> <property 
			name="suppressAllComments" value="true" /> </commentGenerator> -->
		<jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver"
			connectionURL="jdbc:oracle:thin:@192.168.1.12:1521:ORCL" userId="gy"
			password="gy">
			<!-- 针对oracle数据库 -->
			<property name="remarksReporting" value="true"></property>
		</jdbcConnection>

		<!-- java类型处理器 用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl； 注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 
			NUMERIC数据类型； -->
		<javaTypeResolver
			type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
			<!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型 false：默认, scale>0;length>18：使用BigDecimal; 
				scale=0;length[10,18]：使用Long； scale=0;length[5,9]：使用Integer； scale=0;length<5：使用Short； -->
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>
		<!--生成Pojo类存放位置 -->
		<javaModelGenerator targetPackage="com.gy.pojo.partial"
			targetProject="../gy-facade/src/main/java">
			<!-- 是否针对string类型的字段在set的时候进行trim调用 -->
			<property name="trimStrings" value="true" />
			<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			<property name="enableSubPackages" value="false" />
			<!-- for MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter； -->
			<property name="constructorBased" value="false" />
			<!-- for MyBatis3 / MyBatis3Simple 是否创建一个不可变的类，如果为true， 那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 -->
			<property name="immutable " value="false" />
			<!-- 设置一个根对象， 如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项 
				注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括： 1，属性名相同，类型相同，有相同的getter/setter方法； -->
			<property name="rootClass" value="com.gy.common.util.BaseDomain" />
		</javaModelGenerator>
		<!--生成XML文件存放位置 -->
		<sqlMapGenerator targetPackage="com.gy.mapper.partial"
			targetProject="../gy-service/src/main/java">
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>
		<!--生成Mapper类存放位置 。所有的方法都在XML中，接口调用依赖XML文件 -->
		<javaClientGenerator type="XMLMAPPER"
			targetPackage="com.gy.mapper.partial" targetProject="../gy-service/src/main/java">
			<property name="enableSubPackages" value="false" />
		</javaClientGenerator>
 
		<table tableName="gy_shopping_cart">
			<!-- <domainObjectRenamingRule searchString="^Gy" replaceString="" /> -->
		</table>
	</context>
</generatorConfiguration>